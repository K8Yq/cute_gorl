var searchIndex = JSON.parse('{\
"cute_gorl":{"doc":"","t":[0,0,0,5,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["cute","vector2","vector3","cuter","NULL","Vector2","add_assign","add_assign","angle_between","borrow","borrow_mut","clamp_max","clamp_min","clone","clone_into","default","dist","dist_sq","div_assign","eq","fmt","fmt","from","into","is_collinear","is_normalized","is_nullvector","lerp","magn","magn_sq","mul_assign","ne","neg","new","normalize","reflect","rotate","rotate_left","rotate_right","scalar","sub_assign","sub_assign","to_owned","to_string","try_from","try_into","type_id","x","y","NULL","Vector3","add_assign","angle_between","borrow","borrow_mut","clamp_max","clamp_min","clone","clone_into","crossp","default","dist","dist_sq","div_assign","eq","fmt","fmt","from","into","is_collinear","is_coplanar","is_normalized","is_nullvector","lerp","magn","magn_sq","mul_assign","ne","neg","new","normalize","reflect","rotate","rotate_left","rotate_right","scalar","sub_assign","to_owned","to_string","try_from","try_into","type_id","x","y","z"],"q":["cute_gorl","","","cute_gorl::cute","cute_gorl::vector2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cute_gorl::vector3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Mathematical vectors in 2 dimentional space. ","Mathematical vectors in 3 dimentional space. ","","The Nullvector (0 0)","2D Vector","","","calculates the angle between two <code>Vector2</code>s.","","","Scales down a <code>Vector2</code> to a magnitude if it exceeds that …","Scales up a <code>Vector2</code> to a magnitude if it is shorter than …","","","","Calculates the distance between two <code>Vector2</code>s interpreted …","Calculates the the square of distance between two <code>Vector2</code>s …","","","","","","","Tetermines whether or not one <code>Vector2</code> is a multiple of the …","Tetermines whether or not a <code>Vector2</code> is normalized (of …","Tetermines whether or not a <code>Vector2</code>’s komponents are all …","Linearly interpolate between two <code>Vector2</code>s interpreted as …","Calculates the magnitude of a <code>Vector2</code>.","Calculates the square of the magnitude of a <code>Vector2</code>.","","","","","Scales a <code>Vector2</code> to a magnitude of 1.","Reflect a <code>Vector2</code> off of a surface with a certain normal …","Rotate (anti-clockwise) a <code>Vector2</code> by an angle.","Rotate (clockwise) a <code>Vector2</code> by -90 degrees.","Rotate a <code>Vector2</code> by 90 degrees.","Calculates the scalar/dot-product of two <code>Vector2</code>s.","","","","","","","","","","The Nullvector (0 0 0)","3D Vector","","calculates the angle between two <code>Vector3</code>s.","","","Scales down a <code>Vector3</code> to a magnitude if it exceeds that …","Scales up a <code>Vector3</code> to a magnitude if it is shorter than …","","","The crossproduct of two <code>Vector3</code>s.","","Calculates the distance between two <code>Vector3</code>s interpreted …","Calculates the the square of distance between two <code>Vector3</code>s …","","","","","","","Tetermines whether or not one <code>Vector3</code> is a multiple of the …","Tetermines whether or not there exists a plane that …","Tetermines whether or not a <code>Vector3</code> is normalized (of …","Tetermines whether or not a <code>Vector3</code>’s komponents are all …","Linearly interpolate between two <code>Vector3</code>s interpreted as …","Calculates the magnitude of a <code>Vector3</code>.","Calculates the square of the magnitude of a <code>Vector3</code>.","","","","","Scales a <code>Vector3</code> to a magnitude of 1.","Reflect a <code>Vector3</code> off of a surface with a certain normal …","Rotate a <code>Vector3</code> by an angle around another <code>Vector3</code>.","Rotate (clockwise) a <code>Vector3</code> by -90 degrees around another …","Rotate a <code>Vector3</code> by 90 degrees around another <code>Vector3</code>.","Calculates the scalar/dot-product of two <code>Vector3</code>s.","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[null,null,null,[[],["i32",15]],null,null,[[]],[[]],[[],["f64",15]],[[]],[[]],[[["f64",15]]],[[["f64",15]]],[[],["vector2",3]],[[]],[[],["vector2",3]],[[],["f64",15]],[[],["f64",15]],[[["f64",15]]],[[["vector2",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["f64",15]]],[[],["f64",15]],[[],["f64",15]],[[["f64",15]]],[[["vector2",3]],["bool",15]],[[]],[[["f64",15]]],[[]],[[]],[[["f64",15]]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[],["f64",15]],[[]],[[]],[[["f64",15]]],[[["f64",15]]],[[],["vector3",3]],[[]],[[]],[[],["vector3",3]],[[],["f64",15]],[[],["f64",15]],[[["f64",15]]],[[["vector3",3]],["bool",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["f64",15]]],[[],["f64",15]],[[],["f64",15]],[[["f64",15]]],[[["vector3",3]],["bool",15]],[[]],[[["f64",15]]],[[]],[[]],[[["f64",15]]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null],"p":[[3,"Vector2"],[3,"Vector3"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};